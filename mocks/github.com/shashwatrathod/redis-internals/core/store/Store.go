// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	store "github.com/shashwatrathod/redis-internals/core/store"
	utils "github.com/shashwatrathod/redis-internals/utils"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// AutoDeleteExpiredKeys provides a mock function with no fields
func (_m *Store) AutoDeleteExpiredKeys() {
	_m.Called()
}

// Store_AutoDeleteExpiredKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoDeleteExpiredKeys'
type Store_AutoDeleteExpiredKeys_Call struct {
	*mock.Call
}

// AutoDeleteExpiredKeys is a helper method to define mock.On call
func (_e *Store_Expecter) AutoDeleteExpiredKeys() *Store_AutoDeleteExpiredKeys_Call {
	return &Store_AutoDeleteExpiredKeys_Call{Call: _e.mock.On("AutoDeleteExpiredKeys")}
}

func (_c *Store_AutoDeleteExpiredKeys_Call) Run(run func()) *Store_AutoDeleteExpiredKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_AutoDeleteExpiredKeys_Call) Return() *Store_AutoDeleteExpiredKeys_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_AutoDeleteExpiredKeys_Call) RunAndReturn(run func()) *Store_AutoDeleteExpiredKeys_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *Store) Delete(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *Store_Expecter) Delete(key interface{}) *Store_Delete_Call {
	return &Store_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Store_Delete_Call) Run(run func(key string)) *Store_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_Delete_Call) Return(_a0 bool) *Store_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Delete_Call) RunAndReturn(run func(string) bool) *Store_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Evict provides a mock function with no fields
func (_m *Store) Evict() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Evict")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Store_Evict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evict'
type Store_Evict_Call struct {
	*mock.Call
}

// Evict is a helper method to define mock.On call
func (_e *Store_Expecter) Evict() *Store_Evict_Call {
	return &Store_Evict_Call{Call: _e.mock.On("Evict")}
}

func (_c *Store_Evict_Call) Run(run func()) *Store_Evict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Evict_Call) Return(_a0 int) *Store_Evict_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Evict_Call) RunAndReturn(run func() int) *Store_Evict_Call {
	_c.Call.Return(run)
	return _c
}

// ForEach provides a mock function with given fields: _a0
func (_m *Store) ForEach(_a0 func(string, *store.Value) bool) {
	_m.Called(_a0)
}

// Store_ForEach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForEach'
type Store_ForEach_Call struct {
	*mock.Call
}

// ForEach is a helper method to define mock.On call
//   - _a0 func(string , *store.Value) bool
func (_e *Store_Expecter) ForEach(_a0 interface{}) *Store_ForEach_Call {
	return &Store_ForEach_Call{Call: _e.mock.On("ForEach", _a0)}
}

func (_c *Store_ForEach_Call) Run(run func(_a0 func(string, *store.Value) bool)) *Store_ForEach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, *store.Value) bool))
	})
	return _c
}

func (_c *Store_ForEach_Call) Return() *Store_ForEach_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_ForEach_Call) RunAndReturn(run func(func(string, *store.Value) bool)) *Store_ForEach_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *Store) Get(key string) *store.Value {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *store.Value
	if rf, ok := ret.Get(0).(func(string) *store.Value); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Value)
		}
	}

	return r0
}

// Store_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Store_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Store_Expecter) Get(key interface{}) *Store_Get_Call {
	return &Store_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Store_Get_Call) Run(run func(key string)) *Store_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_Get_Call) Return(_a0 *store.Value) *Store_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Get_Call) RunAndReturn(run func(string) *store.Value) *Store_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpiry provides a mock function with given fields: key
func (_m *Store) GetExpiry(key string) *int64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiry")
	}

	var r0 *int64
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// Store_GetExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiry'
type Store_GetExpiry_Call struct {
	*mock.Call
}

// GetExpiry is a helper method to define mock.On call
//   - key string
func (_e *Store_Expecter) GetExpiry(key interface{}) *Store_GetExpiry_Call {
	return &Store_GetExpiry_Call{Call: _e.mock.On("GetExpiry", key)}
}

func (_c *Store_GetExpiry_Call) Run(run func(key string)) *Store_GetExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_GetExpiry_Call) Return(_a0 *int64) *Store_GetExpiry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_GetExpiry_Call) RunAndReturn(run func(string) *int64) *Store_GetExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyMetadata provides a mock function with given fields: key
func (_m *Store) GetKeyMetadata(key string) *store.KeyMetadata {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyMetadata")
	}

	var r0 *store.KeyMetadata
	if rf, ok := ret.Get(0).(func(string) *store.KeyMetadata); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.KeyMetadata)
		}
	}

	return r0
}

// Store_GetKeyMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyMetadata'
type Store_GetKeyMetadata_Call struct {
	*mock.Call
}

// GetKeyMetadata is a helper method to define mock.On call
//   - key string
func (_e *Store_Expecter) GetKeyMetadata(key interface{}) *Store_GetKeyMetadata_Call {
	return &Store_GetKeyMetadata_Call{Call: _e.mock.On("GetKeyMetadata", key)}
}

func (_c *Store_GetKeyMetadata_Call) Run(run func(key string)) *Store_GetKeyMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_GetKeyMetadata_Call) Return(_a0 *store.KeyMetadata) *Store_GetKeyMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_GetKeyMetadata_Call) RunAndReturn(run func(string) *store.KeyMetadata) *Store_GetKeyMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// KeyCount provides a mock function with no fields
func (_m *Store) KeyCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Store_KeyCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyCount'
type Store_KeyCount_Call struct {
	*mock.Call
}

// KeyCount is a helper method to define mock.On call
func (_e *Store_Expecter) KeyCount() *Store_KeyCount_Call {
	return &Store_KeyCount_Call{Call: _e.mock.On("KeyCount")}
}

func (_c *Store_KeyCount_Call) Run(run func()) *Store_KeyCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_KeyCount_Call) Return(_a0 int) *Store_KeyCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_KeyCount_Call) RunAndReturn(run func() int) *Store_KeyCount_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value, expiry
func (_m *Store) Put(key string, value string, expiry *utils.ExpiryTime) {
	_m.Called(key, value, expiry)
}

// Store_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Store_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key string
//   - value string
//   - expiry *utils.ExpiryTime
func (_e *Store_Expecter) Put(key interface{}, value interface{}, expiry interface{}) *Store_Put_Call {
	return &Store_Put_Call{Call: _e.mock.On("Put", key, value, expiry)}
}

func (_c *Store_Put_Call) Run(run func(key string, value string, expiry *utils.ExpiryTime)) *Store_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*utils.ExpiryTime))
	})
	return _c
}

func (_c *Store_Put_Call) Return() *Store_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_Put_Call) RunAndReturn(run func(string, string, *utils.ExpiryTime)) *Store_Put_Call {
	_c.Run(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *Store) Reset() {
	_m.Called()
}

// Store_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Store_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *Store_Expecter) Reset() *Store_Reset_Call {
	return &Store_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *Store_Reset_Call) Run(run func()) *Store_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Reset_Call) Return() *Store_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_Reset_Call) RunAndReturn(run func()) *Store_Reset_Call {
	_c.Run(run)
	return _c
}

// SetExpiry provides a mock function with given fields: key, expiry
func (_m *Store) SetExpiry(key string, expiry *utils.ExpiryTime) {
	_m.Called(key, expiry)
}

// Store_SetExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpiry'
type Store_SetExpiry_Call struct {
	*mock.Call
}

// SetExpiry is a helper method to define mock.On call
//   - key string
//   - expiry *utils.ExpiryTime
func (_e *Store_Expecter) SetExpiry(key interface{}, expiry interface{}) *Store_SetExpiry_Call {
	return &Store_SetExpiry_Call{Call: _e.mock.On("SetExpiry", key, expiry)}
}

func (_c *Store_SetExpiry_Call) Run(run func(key string, expiry *utils.ExpiryTime)) *Store_SetExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*utils.ExpiryTime))
	})
	return _c
}

func (_c *Store_SetExpiry_Call) Return() *Store_SetExpiry_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_SetExpiry_Call) RunAndReturn(run func(string, *utils.ExpiryTime)) *Store_SetExpiry_Call {
	_c.Run(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
